print(squared_mean)
squared_median <- squares[round(length(squares)/2)]
print(squared_median)
squares2 <- numbers[numbers %in% squared_numbers]
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(squares == squares2)
install.packages("styler")
styler:::style_active_file()
install("lintr")
install.packages("lintrr")
install.packages("lintr")
#################
#### PART 1 #####
#################
library(stringr)
my_age <- 19
my_name <- "Andrew"
#returns a statement introducing a person
#takes name and age, returns a string
make_introduction <- function(name, age) {
paste("Hello, my name is", name, "and I'm", age, "years old.")
}
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- str_to_title(my_intro)
print(capital_intro)
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
books <- c(
"fletch won",
"Stranger in a Strange Land",
"The Magician's Nephew",
"Dune",
"The City and the City",
"House of Leaves"
)
print(books)
top_three_books <- books[1:3]
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
#Takes a vector of books and removes the book at the specified location
remove_book <- function(book_titles, to_remove){
if (to_remove < 1 | to_remove > length(books)){
return(book_titles)
}
c(book_titles[0:to_remove-1], books[to_remove+1:length(books)])
}
books_without_four <- remove_book(books, 4)
print(books_without_four)
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
numbers <- 1:201
squared_numbers <- numbers*numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- squares[round(length(squares)/2)]
print(squared_median)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
#an alternative way to get the squares in the first 201 integers
#since all valid squaresof positive nonzero integers from 1:40401 are in numbers_squared
squares2 <- numbers[numbers %in% squared_numbers]
print(squares)
#################
#### PART 4 #####
#################
spring_break <- as.Date("2019-3-16")
today <- as.Date(Sys.Date())
days_to_break <- spring_break-today
birthdays <- list(
ruby = as.Date("1963-12-19"),
phil = as.Date("1964-12-26"),
andrew = as.Date("1999-4-30")
)
parent_bday = format(birthdays$phil, "%d/%m")
birthdays_2019 <- lapply(birthdays, format, "2019-%m-%d")
print(birthdays_2019)
#this function tells you if the passed date, without year, has passed this year
date_has_passed <- function(date_passed){
year <- format(Sys.Date(), "%Y")
day_of_year <- format(as.Date(date_passed, "%d-%m-%Y"), "%d/%m")
date_to_check <- as.Date(paste0(day_of_year, "/", year), "%d/%m/%Y")
print(date_to_check)
date_to_check < Sys.Date()
}
#returns an announcement of the next upcoming birthday of a passed individual and D.O.B.
make_birthday_announcement <- function(name, birthday){
if(date_has_passed(birthday)){
next_year <- as.numeric(format(birthday, "%Y"))+1
new_birthday <- as.Date(paste0(next_year, "/", format(birthday, "%m/%d")))
days_til_birthday = new_birthday - Sys.Date()
} else {
days_til_birthday <- birthday - Sys.Date()
}
paste0(name, "'s birthday is in ", days_til_birthday, " days.")
}
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019),
as.Date(unlist(birthdays_2019, use.names=FALSE)))
print(bday_announcements)
numbers <- 1:201
squared_numbers <- numbers*numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- squares[round(length(squares)/2)]
print(squared_median)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
#an alternative way to get the squares in the first 201 integers
#since all valid squaresof positive nonzero integers from 1:40401 are in numbers_squared
squares2 <- numbers[numbers %in% squared_numbers]
print(squares)
round(length(squared_numbers)/2)
numbers <- 1:201
squared_numbers <- numbers*numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- squared_numbers[round(length(squared_numbers)/2)]
print(squared_median)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
#an alternative way to get the squares in the first 201 integers
#since all valid squaresof positive nonzero integers from 1:40401 are in numbers_squared
squares2 <- numbers[numbers %in% squared_numbers]
print(squares)
clear
cls
numbers <- 1:201
squared_numbers <- numbers*numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- squared_numbers[round(length(squared_numbers)/2)]
print(squared_median)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
#an alternative way to get the squares in the first 201 integers
#since all valid squaresof positive nonzero integers from 1:40401 are in numbers_squared
squares2 <- numbers[numbers %in% squared_numbers]
print(squares)
#################
#### PART 1 #####
#################
library(stringr)
my_age <- 19
my_name <- "Andrew"
#returns a statement introducing a person
#takes name and age, returns a string
make_introduction <- function(name, age) {
paste("Hello, my name is", name, "and I'm", age, "years old.")
}
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- str_to_title(my_intro)
print(capital_intro)
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
books <- c(
"fletch won",
"Stranger in a Strange Land",
"The Magician's Nephew",
"Dune",
"The City and the City",
"House of Leaves"
)
print(books)
top_three_books <- books[1:3]
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
#Takes a vector of books and removes the book at the specified location
remove_book <- function(book_titles, to_remove){
if (to_remove < 1 | to_remove > length(books)){
return(book_titles)
}
c(book_titles[0:to_remove-1], books[to_remove+1:length(books)])
}
books_without_four <- remove_book(books, 4)
print(books_without_four)
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
numbers <- 1:201
squared_numbers <- numbers*numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- squared_numbers[round(length(squared_numbers)/2)]
print(squared_median)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
#an alternative way to get the squares in the first 201 integers
#since all valid squaresof positive nonzero integers from 1:40401 are in numbers_squared
squares2 <- numbers[numbers %in% squared_numbers]
print(squares)
#################
#### PART 4 #####
#################
spring_break <- as.Date("2019-3-16")
today <- as.Date(Sys.Date())
days_to_break <- spring_break-today
birthdays <- list(
ruby = as.Date("1963-12-19"),
phil = as.Date("1964-12-26"),
andrew = as.Date("1999-4-30")
)
parent_bday = format(birthdays$phil, "%d/%m")
birthdays_2019 <- lapply(birthdays, format, "2019-%m-%d")
print(birthdays_2019)
#this function tells you if the passed date, without year, has passed this year
date_has_passed <- function(date_passed){
year <- format(Sys.Date(), "%Y")
day_of_year <- format(as.Date(date_passed, "%d-%m-%Y"), "%d/%m")
date_to_check <- as.Date(paste0(day_of_year, "/", year), "%d/%m/%Y")
print(date_to_check)
date_to_check < Sys.Date()
}
#returns an announcement of the next upcoming birthday of a passed individual and D.O.B.
make_birthday_announcement <- function(name, birthday){
if(date_has_passed(birthday)){
next_year <- as.numeric(format(birthday, "%Y"))+1
new_birthday <- as.Date(paste0(next_year, "/", format(birthday, "%m/%d")))
days_til_birthday = new_birthday - Sys.Date()
} else {
days_til_birthday <- birthday - Sys.Date()
}
paste0(name, "'s birthday is in ", days_til_birthday, " days.")
}
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019),
as.Date(unlist(birthdays_2019, use.names=FALSE)))
print(bday_announcements)
#################
#### PART 1 #####
#################
library(stringr)
my_age <- 19
my_name <- "Andrew"
#returns a statement introducing a person
#takes name and age, returns a string
make_introduction <- function(name, age) {
paste("Hello, my name is", name, "and I'm", age, "years old.")
}
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- str_to_title(my_intro)
print(capital_intro)
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
books <- c(
"fletch won",
"Stranger in a Strange Land",
"The Magician's Nephew",
"Dune",
"The City and the City",
"House of Leaves"
)
print(books)
top_three_books <- books[1:3]
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
#Takes a vector of books and removes the book at the specified location
remove_book <- function(book_titles, to_remove){
if (to_remove < 1 | to_remove > length(book_titles)){
return(book_titles)
} else if (to_remove == 1){
book_titles[2:length(book_titles)]
} else if (to_remove == length(book_titles)){
book_titles[1:length(book_titles)-1]
} else {
c(book_titles[1:to_remove-1], book_titles[to_remove+1:length(book_titles)])
}
}
books_without_four <- remove_book(books, 4)
print(books_without_four)
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
numbers <- 1:201
squared_numbers <- numbers*numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- squared_numbers[round(length(squared_numbers)/2)]
print(squared_median)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
#an alternative way to get the squares in the first 201 integers
#since all valid squaresof positive nonzero integers from 1:40401 are in numbers_squared
squares2 <- numbers[numbers %in% squared_numbers]
print(squares)
#################
#### PART 4 #####
#################
spring_break <- as.Date("2019-3-16")
today <- as.Date(Sys.Date())
days_to_break <- spring_break-today
birthdays <- list(
ruby = as.Date("1963-12-19"),
phil = as.Date("1964-12-26"),
andrew = as.Date("1999-4-30")
)
parent_bday = format(birthdays$phil, "%d/%m")
birthdays_2019 <- lapply(birthdays, format, "2019-%m-%d")
print(birthdays_2019)
#this function tells you if the passed date, without year, has passed this year
date_has_passed <- function(date_passed){
year <- format(Sys.Date(), "%Y")
day_of_year <- format(as.Date(date_passed, "%d-%m-%Y"), "%d/%m")
date_to_check <- as.Date(paste0(day_of_year, "/", year), "%d/%m/%Y")
print(date_to_check)
date_to_check < Sys.Date()
}
#returns an announcement of the next upcoming birthday of a passed individual and D.O.B.
make_birthday_announcement <- function(name, birthday){
if(date_has_passed(birthday)){
next_year <- as.numeric(format(birthday, "%Y"))+1
new_birthday <- as.Date(paste0(next_year, "/", format(birthday, "%m/%d")))
days_til_birthday = new_birthday - Sys.Date()
} else {
days_til_birthday <- birthday - Sys.Date()
}
paste0(name, "'s birthday is in ", days_til_birthday, " days.")
}
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019),
as.Date(unlist(birthdays_2019, use.names=FALSE)))
print(bday_announcements)
styler:::style_active_file()
lint("assignment.R")
library("lintr")
lint("assignment.R")
book_titles[7:6]
books[7:6]
format("01/01/2011")
format("01/01/2011", "2018/%m/%d")
?runif
View(salaries)
# Again use the `runif()` function to pick 100 random numbers in that range.
Salary_changes <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries17, Salary_changes, stringsAsFactors = FALSE)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries17 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
Salary_changes <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries17, Salary_changes, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
# How many employees got a raise?
# What was the dollar value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
View(salaries)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries17 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
Salary_changes <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries17, Salary_changes, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries18 <- salaries$salaries17 + salaries$Salary_changes
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$good_employee <- Salary_changes > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
# How many employees got a raise?
# What was the dollar value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
View(salaries)
salaries$salaries18[57]
View(salaries)
salaries[57,"Employee"]
nrow(salaries[salaries$good_employee == TRUE, ])
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries17 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
Salary_changes <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries17, Salary_changes, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries18 <- salaries$salaries17 + salaries$Salary_changes
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$good_employee <- Salary_changes > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salaries$salaries18[57]
# How many employees got a raise?
nrow(salaries[salaries$good_employee == TRUE, ])
# What was the dollar value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
?nrow
max(salaries$Salary_changes)
salaries[salaries$Salary_changes == max_raise, ]
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries17 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
Salary_changes <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries17, Salary_changes, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries18 <- salaries$salaries17 + salaries$Salary_changes
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$good_employee <- Salary_changes > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salaries$salaries18[57]
# How many employees got a raise?
nrow(salaries[salaries$good_employee == TRUE, ])
# What was the dollar value of the highest raise?
max_raise <- max(salaries$Salary_changes)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$Salary_changes == max_raise, ]
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
salaries[salaries$Salary_changes == max_raise, ]
salaries[salaries$Salary_changes == max_raise, ]$employees
salaries[salaries$Salary_changes == max_raise, "employees"]
?write
getwd()
setwd
setwd("~/Info201/book-exercises/chapter-10-exercises/exercise-2")
